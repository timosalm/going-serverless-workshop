#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")
---
apiVersion: learningcenter.tanzu.vmware.com/v1beta1
kind: Workshop
metadata:
  name: going-serverless
spec:
  title: Going Serverless using the Spring Framework ecosystem
  description: A workshop that demonstrates how to implement your serverless applications and compile them to GraalVM native images with the robust collection of related functionality the Spring Framework ecosystem provides.
  vendor: tanzu.vmware.com
  difficulty: beginner
  duration: 90m
  url: https://github.com/tsalm-pivotal/going-serverless-workshop
  content:
    image: #@ "{}/tap-workshop/going-serverless-workshop:latest".format(data.values.container_registry.hostname)
    files: #@ "github.com/{}/going-serverless-workshop/workshop?ref={}".format(data.values.workshop_git.username,data.values.workshop_git.branch)
  session:
    namespaces:
      budget: custom
    applications:
      terminal:
        enabled: true
        layout: split
      console:
        enabled: false
      editor:
        enabled: true
      docker:
        enabled: true
        storage: 1Gi
    env: 
    - name: TAP_INGRESS
      value: #@ data.values.tap.ingress_domain
    - name: TAP_CNRS_SUBDOMAIN
      value: #@ data.values.tap.cnrs_subdomain
    - name: CONTAINER_REGISTRY_HOSTNAME
      value: #@ data.values.container_registry.hostname
    - name: CONTAINER_REGISTRY_USERNAME
      value: #@ data.values.container_registry.username
    - name: CONTAINER_REGISTRY_PASSWORD
      value: #@ data.values.container_registry.password
    - name: CONTAINER_REGISTRY_REPOSITORY
      value: #@ data.values.container_registry.repository
    objects:
      - apiVersion: v1
        kind: LimitRange
        metadata:
          name: resource-limits
        spec:
          limits:
            - type: PersistentVolumeClaim
              max:
                storage: 10Gi
      # Permissions for tap-sa (Supply Chain)
      - apiVersion: v1
        kind: Secret
        metadata:
          name: tanzu-net-credentials
        type: kubernetes.io/dockerconfigjson
        data:
          #@ docker_auth = base64.encode("{}:{}".format(data.values.tanzunet.username, data.values.tanzunet.password))
          #@ docker_creds = {"username": data.values.tanzunet.username, "password": data.values.tanzunet.password, "auth": docker_auth}
          .dockerconfigjson: #@ base64.encode(json.encode({"auths": {"registry.tanzu.vmware.com": docker_creds}}))
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: $(session_namespace)-default
        rules:
        - apiGroups: [kpack.io]
          resources: [images]
          verbs: ['*']
        - apiGroups: [""]
          resources: ['configmaps']
          verbs: ['*']
        - apiGroups: [""]
          resources: ['pods']
          verbs: ['list']
        - apiGroups: [serving.knative.dev]
          resources: ['services']
          verbs: ['*']
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-default
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: $(session_namespace)-default
        subjects:
          - kind: ServiceAccount
            name: default
            namespace: $(session_namespace)
      # Permissions for workshop session
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-session-crb
          namespace: $(session_namespace)
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
          - kind: ServiceAccount
            namespace: $(workshop_namespace)
            name: $(service_account)

      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: $(session_namespace)-default-crb
          namespace: $(session_namespace)
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
          - kind: ServiceAccount
            namespace: $(session_namespace)
            name: default

     
     